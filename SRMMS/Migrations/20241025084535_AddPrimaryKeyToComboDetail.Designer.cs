// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SRMMS.Models;

#nullable disable

namespace SRMMS.Migrations
{
    [DbContext(typeof(SRMMSContext))]
    [Migration("20241025084535_AddPrimaryKeyToComboDetail")]
    partial class AddPrimaryKeyToComboDetail
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("SRMMS.Models.Account", b =>
                {
                    b.Property<int>("AccId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("acc_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccId"), 1L, 1);

                    b.Property<int>("CusId")
                        .HasColumnType("int")
                        .HasColumnName("cus_id");

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("emp_id");

                    b.HasKey("AccId");

                    b.HasIndex("CusId");

                    b.HasIndex("EmpId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("SRMMS.Models.BookingTable", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("book_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"), 1L, 1);

                    b.Property<int?>("AccId")
                        .HasColumnType("int")
                        .HasColumnName("acc_id");

                    b.Property<int?>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    b.Property<DateTime?>("TimeBooking")
                        .HasColumnType("date")
                        .HasColumnName("time_booking");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("date")
                        .HasColumnName("time_out");

                    b.HasKey("BookId");

                    b.HasIndex("AccId");

                    b.HasIndex("TableId");

                    b.ToTable("Booking_table", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Category", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatId"), 1L, 1);

                    b.Property<string>("CatName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cat_name");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.HasKey("CatId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SRMMS.Models.Combo", b =>
                {
                    b.Property<int>("ComboId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ComboId"), 1L, 1);

                    b.Property<string>("ComboDiscription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("combo_discription");

                    b.Property<string>("ComboImg")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("combo_img");

                    b.Property<decimal>("ComboMoney")
                        .HasColumnType("money")
                        .HasColumnName("combo_money");

                    b.Property<string>("ComboName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("combo_name");

                    b.Property<bool>("ComboStatus")
                        .HasColumnType("bit")
                        .HasColumnName("combo_status");

                    b.HasKey("ComboId");

                    b.ToTable("Combo", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.ComboDetail", b =>
                {
                    b.Property<int>("ComboId")
                        .HasColumnType("int")
                        .HasColumnName("combo_id");

                    b.Property<int>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("pro_id");

                    b.HasIndex("ComboId");

                    b.HasIndex("ProId");

                    b.ToTable("Combo_Detail", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Customer", b =>
                {
                    b.Property<int>("CusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cus_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CusId"), 1L, 1);

                    b.Property<string>("CusFullname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("cus_fullname");

                    b.Property<string>("CusPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CusPhone")
                        .HasColumnType("int")
                        .HasColumnName("cus_phone");

                    b.Property<double?>("Ponit")
                        .HasColumnType("float")
                        .HasColumnName("ponit");

                    b.HasKey("CusId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SRMMS.Models.DiscountCode", b =>
                {
                    b.Property<int>("CodeId")
                        .HasColumnType("int")
                        .HasColumnName("code_id");

                    b.Property<string>("CodeDetail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("code_detail");

                    b.Property<double?>("DiscountValue")
                        .HasColumnType("float")
                        .HasColumnName("discount_value");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.HasKey("CodeId");

                    b.HasIndex("OrderId");

                    b.ToTable("Discount_code", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Employee", b =>
                {
                    b.Property<int>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("emp_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpId"), 1L, 1);

                    b.Property<string>("EmpAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("emp_address");

                    b.Property<DateTime?>("EmpDob")
                        .HasColumnType("date")
                        .HasColumnName("emp_dob");

                    b.Property<string>("EmpEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_email");

                    b.Property<DateTime?>("EmpEndDate")
                        .HasColumnType("date")
                        .HasColumnName("emp_endDate");

                    b.Property<string>("EmpFirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_first_name");

                    b.Property<bool>("EmpGender")
                        .HasColumnType("bit")
                        .HasColumnName("emp_gender");

                    b.Property<string>("EmpLastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_last_name");

                    b.Property<string>("EmpPassword")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("emp_password");

                    b.Property<int>("EmpPhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("emp_phoneNumber");

                    b.Property<int>("EmpRoleId")
                        .HasColumnType("int")
                        .HasColumnName("emp_role_id");

                    b.Property<DateTime>("EmpStartDate")
                        .HasColumnType("date")
                        .HasColumnName("emp_startDate");

                    b.Property<bool?>("EmpStatus")
                        .HasColumnType("bit")
                        .HasColumnName("emp_status");

                    b.Property<string>("EmpWard")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("emp_ward");

                    b.HasKey("EmpId");

                    b.HasIndex("EmpRoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SRMMS.Models.Feedback", b =>
                {
                    b.Property<int>("AccId")
                        .HasColumnType("int")
                        .HasColumnName("acc_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Feedback1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("feedback");

                    b.Property<int>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("pro_id");

                    b.Property<int>("Ratestar")
                        .HasColumnType("int")
                        .HasColumnName("ratestar");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasIndex("AccId");

                    b.HasIndex("ProId");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<int>("AccId")
                        .HasColumnType("int")
                        .HasColumnName("acc_id");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasColumnName("order_status_id");

                    b.Property<bool?>("Staus")
                        .HasColumnType("bit")
                        .HasColumnName("staus");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("money")
                        .HasColumnName("totalMoney");

                    b.HasKey("OrderId");

                    b.HasIndex("AccId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("order_detail_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.Property<int?>("ProId")
                        .HasColumnType("int")
                        .HasColumnName("pro_id");

                    b.Property<int>("Quantiity")
                        .HasColumnType("int")
                        .HasColumnName("quantiity");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProId");

                    b.ToTable("Order_Details", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Product", b =>
                {
                    b.Property<int>("ProId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("pro_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProId"), 1L, 1);

                    b.Property<int>("CatId")
                        .HasColumnType("int")
                        .HasColumnName("cat_id");

                    b.Property<string>("ProCalories")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("pro_calories");

                    b.Property<int>("ProCookingTime")
                        .HasColumnType("int")
                        .HasColumnName("pro_cooking_time");

                    b.Property<string>("ProDiscription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pro_discription");

                    b.Property<string>("ProImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("pro_img");

                    b.Property<string>("ProName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("pro_name");

                    b.Property<decimal>("ProPrice")
                        .HasColumnType("money")
                        .HasColumnName("pro_price");

                    b.Property<bool>("ProStatus")
                        .HasColumnType("bit")
                        .HasColumnName("pro_status");

                    b.HasKey("ProId")
                        .HasName("PK_Menu");

                    b.HasIndex("CatId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SRMMS.Models.RestaurantInformation", b =>
                {
                    b.Property<string>("ResAdress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("res_adress");

                    b.Property<string>("ResEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("res_email");

                    b.Property<string>("ResFacebook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("res_facebook");

                    b.Property<string>("ResName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("res_name");

                    b.Property<int>("ResPhone")
                        .HasColumnType("int")
                        .HasColumnName("res_phone");

                    b.ToTable("Restaurant_Information", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Table", b =>
                {
                    b.Property<int>("TableId")
                        .HasColumnType("int")
                        .HasColumnName("table_id");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("QR_code");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("status");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("table_name");

                    b.HasKey("TableId");

                    b.ToTable("Table", (string)null);
                });

            modelBuilder.Entity("SRMMS.Models.Account", b =>
                {
                    b.HasOne("SRMMS.Models.Customer", "Cus")
                        .WithMany("Accounts")
                        .HasForeignKey("CusId")
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Customers");

                    b.HasOne("SRMMS.Models.Employee", "Emp")
                        .WithMany("Accounts")
                        .HasForeignKey("EmpId")
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_Employees");

                    b.Navigation("Cus");

                    b.Navigation("Emp");
                });

            modelBuilder.Entity("SRMMS.Models.BookingTable", b =>
                {
                    b.HasOne("SRMMS.Models.Account", "Acc")
                        .WithMany("BookingTables")
                        .HasForeignKey("AccId")
                        .HasConstraintName("FK_Booking_table_Accounts");

                    b.HasOne("SRMMS.Models.Table", "Table")
                        .WithMany("BookingTables")
                        .HasForeignKey("TableId")
                        .HasConstraintName("FK_Booking_table_Table");

                    b.Navigation("Acc");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SRMMS.Models.ComboDetail", b =>
                {
                    b.HasOne("SRMMS.Models.Combo", "Combo")
                        .WithMany()
                        .HasForeignKey("ComboId")
                        .IsRequired()
                        .HasConstraintName("FK_Combo Detail_Combo");

                    b.HasOne("SRMMS.Models.Product", "Pro")
                        .WithMany()
                        .HasForeignKey("ProId")
                        .IsRequired()
                        .HasConstraintName("FK_Combo Detail_Menu");

                    b.Navigation("Combo");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("SRMMS.Models.DiscountCode", b =>
                {
                    b.HasOne("SRMMS.Models.Order", "Order")
                        .WithMany("DiscountCodes")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Discount_code_Order");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SRMMS.Models.Employee", b =>
                {
                    b.HasOne("SRMMS.Models.Role", "EmpRole")
                        .WithMany("Employees")
                        .HasForeignKey("EmpRoleId")
                        .IsRequired()
                        .HasConstraintName("FK_Employees_Role");

                    b.Navigation("EmpRole");
                });

            modelBuilder.Entity("SRMMS.Models.Feedback", b =>
                {
                    b.HasOne("SRMMS.Models.Account", "Acc")
                        .WithMany()
                        .HasForeignKey("AccId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Accounts");

                    b.HasOne("SRMMS.Models.Product", "Pro")
                        .WithMany()
                        .HasForeignKey("ProId")
                        .IsRequired()
                        .HasConstraintName("FK_Feedback_Menu");

                    b.Navigation("Acc");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("SRMMS.Models.Order", b =>
                {
                    b.HasOne("SRMMS.Models.Account", "Acc")
                        .WithMany("Orders")
                        .HasForeignKey("AccId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Accounts");

                    b.Navigation("Acc");
                });

            modelBuilder.Entity("SRMMS.Models.OrderDetail", b =>
                {
                    b.HasOne("SRMMS.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Details_Order");

                    b.HasOne("SRMMS.Models.Product", "Pro")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProId")
                        .HasConstraintName("FK_Order_Details_Products");

                    b.Navigation("Order");

                    b.Navigation("Pro");
                });

            modelBuilder.Entity("SRMMS.Models.Product", b =>
                {
                    b.HasOne("SRMMS.Models.Category", "Cat")
                        .WithMany("Products")
                        .HasForeignKey("CatId")
                        .IsRequired()
                        .HasConstraintName("FK_Menu_Categories");

                    b.Navigation("Cat");
                });

            modelBuilder.Entity("SRMMS.Models.Account", b =>
                {
                    b.Navigation("BookingTables");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SRMMS.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SRMMS.Models.Customer", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("SRMMS.Models.Employee", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("SRMMS.Models.Order", b =>
                {
                    b.Navigation("DiscountCodes");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SRMMS.Models.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SRMMS.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SRMMS.Models.Table", b =>
                {
                    b.Navigation("BookingTables");
                });
#pragma warning restore 612, 618
        }
    }
}
